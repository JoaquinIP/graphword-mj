# .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    # 1. Configurar credenciales AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    # 2. Instalar Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    # 3. Terraform Init
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # 4. Terraform Validate
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    # 5. Terraform Plan
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform

    # 6. Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

    # 7. Capturar ec2_public_dns
    - name: Capture ec2_public_dns
      id: dns
      working-directory: ./terraform
      shell: bash
      run: |
        # Guardamos la salida en dns_temp.txt
        terraform output -no-color ec2_public_dns > dns_temp.txt 2>/dev/null || true
        
        echo "::debug::File dns_temp.txt =>"
        cat dns_temp.txt | sed 's/^/::debug::/'

        DNS_LINE=$(cat dns_temp.txt)
        # Extrae la subcadena que coincida con ec2-....amazonaws.com
        DNS_CLEAN=$(echo "$DNS_LINE" | grep -oE 'ec2-[^ ]*\.amazonaws\.com')

        echo "::debug::DNS_CLEAN=$DNS_CLEAN"

        # En lugar de echo "ec2url=$DNS_CLEAN" >> $GITHUB_OUTPUT, usamos multiline:
        echo "ec2url<<EOF" >> "$GITHUB_OUTPUT"
        echo "$DNS_CLEAN" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"


    - name: Print DNS
      run: echo "EC2 DNS = ${{ steps.dns.outputs.ec2url }}"

    # 8. Instalar Python y dependencias
    - name: Install Python Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install --upgrade pip
        pip3 install -r app/requirements.txt
        pip3 install pytest requests

    # 9. Ejecutar pytest contra la API real
    - name: Run Tests
      env:
        API_HOST: ${{ steps.dns.outputs.ec2url }}
      run: |
        pytest --maxfail=1 --disable-warnings -v

    # 10. Terraform Destroy (para no dejar la infra encendida)
    - name: Terraform Destroy
      if: always()
      run: terraform destroy -auto-approve

  destroy-on-failure:
    # Este job depende del anterior
    needs: [build-deploy-test]
    runs-on: ubuntu-latest
    # Se ejecuta solo si 'build-deploy-test' falla
    if: failure()

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./terraform
